package org.sustainability.likeherotozero.entity;

import jakarta.persistence.*;
import org.hibernate.annotations.ColumnDefault;

import java.text.DecimalFormat;
import java.util.Date;

/**
 * Entity class representing emission data for a specific country on a specific date.
 * This class stores details about the emission value, the country it is associated with,
 * and metadata such as creation and update timestamps.
 */
@Entity
@Table(uniqueConstraints = { @UniqueConstraint(columnNames = { "reportedFor", "country_id" }) })
public class EmissionData {

    /**
     * The unique identifier for the emission data entry.
     * This ID is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    /**
     * The timestamp when the emission data was created.
     * This field is automatically set to the current date and time when the entity is created.
     */
    @Column(nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdAt = new Date();

    /**
     * Indicates whether the emission data entry has been approved.
     * This field is false by default.
     */
    @Column(nullable = false)
    @ColumnDefault("false")
    private boolean approved = false;

    /**
     * The timestamp when the emission data was last updated.
     * This field is automatically set to the current date and time when the entity is updated.
     */
    @Column(nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date updatedAt = new Date();

    /**
     * The date for which the emission data is reported.
     * This field is required and represents the specific date the data applies to.
     */
    @Column(nullable = false)
    @Temporal(TemporalType.DATE)
    private Date reportedFor;

    /**
     * The country associated with the emission data.
     * This field is required and represents a many-to-one relationship with the {@link Country} entity.
     */
    @ManyToOne
    @JoinColumn(nullable = false)
    private Country country;

    /**
     * The user who created the emission data entry.
     * This field represents a many-to-one relationship with the {@link User} entity.
     */
    @ManyToOne
    @JoinColumn
    private User createdBy;

    /**
     * The value of the emissions reported.
     * This field is required and represents the amount of emissions recorded.
     */
    @Column(nullable = false)
    private double value;

    /**
     * Default constructor for JPA.
     */
    public EmissionData() {
    }

    /**
     * Gets the unique identifier of the emission data.
     *
     * @return the ID of the emission data.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the emission data.
     *
     * @param id the ID to set.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the timestamp when the emission data was created.
     *
     * @return the creation timestamp.
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the timestamp when the emission data was created.
     *
     * @param createdAt the creation timestamp to set.
     */
    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets the timestamp when the emission data was last updated.
     *
     * @return the last update timestamp.
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Sets the timestamp when the emission data was last updated.
     *
     * @param updatedAt the last update timestamp to set.
     */
    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Gets the emission value.
     *
     * @return the emission value.
     */
    public double getValue() {
        return value;
    }

    /**
     * Gets the emission value rounded to three decimal places as a formatted string.
     *
     * @return the rounded emission value as a string.
     */
    public String getRoundedValue() {
        DecimalFormat decimalFormat = new DecimalFormat("0.000");
        return decimalFormat.format(value);
    }

    /**
     * Sets the emission value.
     *
     * @param value the emission value to set.
     */
    public void setValue(double value) {
        this.value = value;
    }

    /**
     * Gets the country associated with the emission data.
     *
     * @return the associated country.
     */
    public Country getCountry() {
        return country;
    }

    /**
     * Sets the country associated with the emission data.
     *
     * @param country the country to set.
     */
    public void setCountry(Country country) {
        this.country = country;
    }

    /**
     * Gets the user who created the emission data entry.
     *
     * @return the user who created the emission data.
     */
    public User getCreatedBy() {
        return createdBy;
    }

    /**
     * Sets the user who created the emission data entry.
     *
     * @param createdBy the user to set.
     */
    public void setCreatedBy(User createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets the date for which the emission data is reported.
     *
     * @return the reported date.
     */
    public Date getReportedFor() {
        return reportedFor;
    }

    /**
     * Sets the date for which the emission data is reported.
     *
     * @param reportedFor the reported date to set.
     */
    public void setReportedFor(Date reportedFor) {
        this.reportedFor = reportedFor;
    }

    /**
     * Checks if the emission data has been approved.
     *
     * @return true if the data is approved, false otherwise.
     */
    public boolean isApproved() {
        return approved;
    }

    /**
     * Sets the approval status of the emission data.
     *
     * @param approved the approval status to set.
     */
    public void setApproved(boolean approved) {
        this.approved = approved;
    }
}
