package org.sustainability.likeherotozero.entity;

import jakarta.persistence.*;

import java.util.List;

/**
 * Entity class representing a user in the application.
 * This class stores details about a user, including their username, password,
 * active status, and roles, as well as any emission data entries they have created.
 */
@Entity
public class User {

    /**
     * The unique identifier for the user.
     * This ID is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    /**
     * The unique username of the user.
     * This field is required and must be unique.
     */
    @Column(unique = true, nullable = false)
    private String username;

    /**
     * The password of the user.
     * This field is required.
     */
    @Column(nullable = false)
    private String password;

    /**
     * Indicates whether the user account is active.
     */
    private boolean isActive;

    /**
     * The list of emission data entries added by the user.
     * This relationship is mapped by the "createdBy" field in the {@link EmissionData} entity.
     */
    @OneToMany(mappedBy = "createdBy")
    private List<EmissionData> addedEmissionData;

    /**
     * The roles assigned to the user.
     * This is a many-to-many relationship with the {@link UserRole} entity.
     */
    @ManyToMany
    @JoinTable(name = "User_UserRole",
            joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"),
            inverseJoinColumns = @JoinColumn(name = "userRole_id", referencedColumnName = "id")
    )
    private List<UserRole> userRoles;

    /**
     * Default constructor for JPA.
     */
    public User() {
    }

    /**
     * Gets the unique identifier of the user.
     *
     * @return the ID of the user.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the user.
     *
     * @param id the ID to set.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the username of the user.
     *
     * @return the username of the user.
     */
    public String getUsername() {
        return username;
    }

    /**
     * Sets the username of the user.
     *
     * @param username the username to set.
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Gets the password of the user.
     *
     * @return the password of the user.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the password of the user.
     *
     * @param password the password to set.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Checks if the user account is active.
     *
     * @return true if the account is active, false otherwise.
     */
    public boolean isActive() {
        return isActive;
    }

    /**
     * Sets the active status of the user account.
     *
     * @param active the active status to set.
     */
    public void setActive(boolean active) {
        isActive = active;
    }

    /**
     * Gets the list of emission data entries added by the user.
     *
     * @return the list of {@link EmissionData} entries.
     */
    public List<EmissionData> getAddedEmissionData() {
        return addedEmissionData;
    }

    /**
     * Sets the list of emission data entries added by the user.
     *
     * @param addedEmissionData the list of {@link EmissionData} entries to set.
     */
    public void setAddedEmissionData(List<EmissionData> addedEmissionData) {
        this.addedEmissionData = addedEmissionData;
    }

    /**
     * Adds an emission data entry to the list and sets this user as the creator.
     *
     * @param emissionData the {@link EmissionData} entry to add.
     */
    public void addAddedEmissionData(EmissionData emissionData) {
        this.addedEmissionData.add(emissionData);
        emissionData.setCreatedBy(this);
    }

    /**
     * Removes an emission data entry from the list and clears the user reference.
     *
     * @param emissionData the {@link EmissionData} entry to remove.
     */
    public void removeAddedEmissionData(EmissionData emissionData) {
        this.addedEmissionData.remove(emissionData);
        emissionData.setCreatedBy(null);
    }

    /**
     * Gets the list of roles assigned to the user.
     *
     * @return the list of {@link UserRole} entities.
     */
    public List<UserRole> getUserRoles() {
        return userRoles;
    }

    /**
     * Sets the list of roles assigned to the user.
     *
     * @param userRoles the list of {@link UserRole} entities to set.
     */
    public void setUserRoles(List<UserRole> userRoles) {
        this.userRoles = userRoles;
    }
}